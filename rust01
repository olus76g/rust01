
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int	loop(int **p);
int possible(int **p, int i, int j);
int	check_if(int *p, int i, int m, int **q);

int rust01()
{
	char	j;
	int	i;
	int	**num;
	int	set_num;

	i = 0;
	j = 0;
	set_num = 4;
	num = (int **) malloc(set_num * sizeof(int *));
	while(i < set_num)
	{
	num[i] = (int *) malloc(set_num * sizeof(int));
	i++;
	}
	i = 0;
	while(i < set_num)
	{
		while(j < set_num)
		{
		num[i][j] = 0;
		j++;
		}
	j = 0;
	i++;
	}
	//try(num[1][2]);
	loop(num);
	free(num);
	//value_possible(num[0][0]);
}
int	post(int **p, int i, int j)
{
	int	n1;
	int	n2;
	int	n3;
	int	n4;

	n1 = 0;
	n2 = 0;
	n3 = 0;
	n4 = 0;
	while (j < 4)
	{
		if (p[i][j] == 1)
			n1++;
		else if (p[i][j] == 2)
			n2++;
		else if (p[i][j] == 3)		
			n3++;
		else if (p[i][j] == 4)		
			n4++;
	}
	j++;
	if (n1 != 2 || n2 !=2 || n3 != 2 || n4 !=2)
		return (0);
	return (1);
}
int	loop(int **p)
{	
	int	i;
	int	j;
	int	k;

	i = 0;
	j = 0;
	k = 1;
	while(i < 4)
	{
		p[i][j] = k;
		if(j==3)
		{
		if(possible(p, i, j))
		{
			// if(check_if(0, 0, 0, p))
			// {
			i++;
			// }
		}
		k = 1;
		j = -1;
		}
		k++;
		j++;
	}
	for(int i=0;i<4;i++)
	{
		for(int	j=0;j<4;j++)
		{
			printf("%d ",p[i][j]);
		}
		printf("\n");
	}
}

int possible(int **p, int i, int j)
{
	if(p[i][j-1] == p[i][j])
	{
		p[i][j] = 0;
		p[i][j - 1] +=1;
		printf("%d ",p[i][j - 1]);
		printf("%d ",p[i][j]);
		return 0;
	}
	return 1;
}

int	check_if(int *p, int i, int m, int **q)
{
	int	y;
	int	n;

	if (((p[i] == 1) && (p[m] == 2)) && ((q[y][0] == 4) && (q[y][3] == 3)))
		n = 1;
	else if (((p[i] == 1) && (p[m] == 3)) && q[y][0] == 4)
		n = 1;
	else if (((p[i] == 2) && (p[m] == 1)) && ((q[y][0] == 3) && (q[y][3] == 4)))
		n = 1;
	else if (((p[i] == 2) && (p[m] == 3)) && q[y][1] == 4)
		n = 1;
	else if (((p[i] == 3) && (p[m] == 1)) && q[y][3] == 4)
		n = 1;
	else if (((p[i] == 3) && (p[m] == 2)) && q[y][2] == 4)
		n = 1;
	else if (((p[i] == 1) && (p[m] == 4)) && ((q[y][0] == 4)
		&& (q[y][1] == 3)) && ((q[y][2] == 2) && (q[y][3] == 1)))
		n = 1;
	else if (((p[i] == 4) && (p[m] == 1)) && ((q[y][0] == 1)
		&& (q[y][1] == 2)) && ((q[y][2] == 3) && (q[y][3] == 4)))
		n = 1;
	else
		n = 0;
	return (n);
}


int	main()
{
	rust01();
}
